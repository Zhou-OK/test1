//注意这不是费马小定理，这个是欧拉函数

/*
特性 :
1.若a为质数,phi[a]=a-1;
2.若a为质数,b mod a=0,phi[a*b]=phi[b]*a
3.若a,b互质,phi[a*b]=phi[a]*phi[b](当a为质数时,if b mod a!=0 ,phi[a*b]=phi[a]*phi[b])
*/
int m[n],phi[n],p[n],nump;
//m[i]标记i是否为素数,0为素数,1不为素数;p是存放素数的数组;nump是当前素数个数;phi[i]为欧拉函数
int main()
{
        phi[1]=1;
    for (int i=2;i<=n;i++)
    {
        if (!m[i])//i为素数
        {
            p[++nump]=i;//将i加入素数数组p中
            phi[i]=i-1;//因为i是素数,由特性得知    
        }    
        for (int j=1;j<=nump&&p[j]*i<=n;j++)  //用当前已得到的素数数组p筛,筛去p[j]*i
        {
            m[p[j]*i]=1;//可以确定i*p[j]不是素数 
            if (i%p[j]==0) //看p[j]是否是i的约数,因为素数p[j],等于判断i和p[j]是否互质 
            {
                phi[p[j]*i]=phi[i]*p[j]; //特性2
                break;
            }
            else phi[p[j]*i]=phi[i]*(p[j]-1); //互质,特性3其,p[j]-1就是phi[p[j]]   
        }
    }
}















参赛选手

#include <bits/stdc++.h>
using namespace std;
#define ll long long
const ll mod=1e9+7;
ll comp(ll n, ll m)
{
    ll ans = 1;
    for (int i = 0; i < m; i++)
        ans =ans*(n - i)%mod;
    for (int i = 0; i < m; i++)
        ans = ans/(i + 1)%mod;
    return ans;
}
ll ksm(ll n, ll m)
{
    ll res = 1;
    while (m > 0)
    {
        if (m & 1)
            res = (res * n) % mod;
        n = (n * n) %mod;
        m = m >> 1;
    }
    return res;
}
ll C(ll n,ll m)
{
    if(m>(n-m))
        m=n-m;
    ll up=1,down=1;
    for(int i=1;i<=m;i++)
    {
        up=up*(n+1-i)%mod;
        down=down*i%mod;
    }
    return up*ksm(down,mod-2)%mod;
    //如果模数不是质数 return up*ksm(down,eular(mod)-1)%mod;
}
ll eular(ll n)
{
    ll ans = n;
    for(int i=2;i*i<=n;++i)
    {
        if(n%i==0)
        {
            ans = ans/i*(i-1);
            while(n%i==0)
            {
                n/=i;
            }
        }
    }
    if(n>1)
        ans=ans/n*(n-1);
    return ans;
}
int main()
{
    ll n,m;
    while(scanf("%lld %lld",&n,&m)!=EOF)
    {
        printf("%lld\n",C(n,m));
    }
    return 0;
}
